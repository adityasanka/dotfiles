#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

* Welcome
  I use this org mode document to manage my Emacs configuration.
  This file generates `init.el` which can be loaded by Emacs at startup.

* Package Management
** Setup package archives

   + Use org package [[https://orgmode.org/elpa.html][archive]] to install the latest version of org mode and other community add-ons.
    
   #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)

     ;; Setup package archives
     (setq package-archives
	   '(("gnu" . "https://elpa.gnu.org/packages/")
	     ("org" . "https://orgmode.org/elpa/")
	     ("melpa" . "https://melpa.org/packages/")))

     ;; Initialize package system
     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))
   #+end_src
   
** Install use-package

   #+begin_src emacs-lisp
     ;; Install use-package if not already present
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (require 'use-package)

     ;; Ensure that every package is installed
     (setq use-package-always-ensure t)
   #+end_src
 
* StartUp Configuration
** Set custom file

   #+begin_src emacs-lisp
     ;; Use separate file for storing customization info
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
   #+end_src

** Setup env variables

   #+begin_src emacs-lisp
     ;; load env variables from shell
     (use-package exec-path-from-shell
       :config
       (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))
   #+end_src

** Splash settings
   
   #+begin_src emacs-lisp
     ;; Inhibit startup message
     (setq inhibit-startup-message t)
   #+end_src

** Visual preferences

   #+begin_src emacs-lisp
     (scroll-bar-mode -1) ; Disable visual scroll bar
     (tool-bar-mode -1)   ; Disable the tool bar
     (tooltip-mode -1)    ; Disable tooltips
     (set-fringe-mode 10) ; Give some breathing room
     (menu-bar-mode -1)   ; Disable menu bar

     ;; Setup the visible bell
     (setq visible-bell t)
   #+end_src

   #+begin_src emacs-lisp
     (global-display-line-numbers-mode t)

     ;; Disable line numbers for some modes
     (dolist (mode `(org-mode-hook
		     term-mode-hook
		     shell-mode-hook
		     eshell-mode-hook))
       (add-hook mode (lambda() (display-line-numbers-mode 0))))
   #+end_src

   #+begin_src emacs-lisp
     ;; Enable smooth scrolling
     (use-package smooth-scrolling
       :ensure t
       :init (smooth-scrolling-mode 1))
   #+end_src

   #+begin_src emacs-lisp
     ;; Highlight delimiters like parentheses
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src
   
* File Management
** Backup

   #+begin_src emacs-lisp
     ;; store backup files in the tmp dir
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
   #+end_src
   
** Auto Save

   #+begin_src emacs-lisp
     ;; store auto-save files in the tmp dir
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+end_src
   
* Fonts and Themes
** Fonts

   #+begin_src emacs-lisp
     ;; Set font
     (set-face-attribute 'default nil :font "Cascadia Code-16" :weight 'semi-light)

     ;; Set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil :font "Cascadia Code-16" :weight 'semi-light)

     ;; Set the variable pitch face
     (set-face-attribute 'variable-pitch nil :font "Cascadia Code-16" :weight 'semi-light)
   #+end_src

   #+begin_src emacs-lisp
     ;; icon fonts to prettify doom mode line
     (use-package all-the-icons
       :init
       (when (and (not (member "all-the-icons" (font-family-list)))
		  (window-system))
	 (all-the-icons-install-fonts t)))

     (use-package all-the-icons-dired
       :if (display-graphic-p)
       :hook (dired-mode . all-the-icons-dired-mode))
   #+end_src
   
** Themes

   #+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1))
   #+end_src
   
   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       ;; Global Settings
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (load-theme 'doom-dracula t)
       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config))
   #+end_src
   
** Misc

   #+begin_src emacs-lisp
     ;; Show column number in mode line
     (column-number-mode)

     ;; Set fringe color to nil
     (set-face-attribute 'fringe nil :background nil)

     ;; Set line height
     (setq-default line-spacing 0.5)
   #+end_src
   
* Keyboard
** Esc Key

   #+begin_src emacs-lisp
     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+end_src

** Command Log

   #+begin_src emacs-lisp
     ;; Log commands in a buffer
     (use-package command-log-mode)
   #+end_src

** Key Bindings
   
   #+begin_src emacs-lisp
     ;; Compose key sequences
     (use-package hydra)

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("f" nil "finished" :exit t))
   #+end_src

   #+begin_src emacs-lisp
     ;; Convenient key bindings 
     (use-package general
       :after (ivy counsel)
       :config  
       (general-create-definer rune/leader-keys
			      :keymaps '(emacs)
			      :prefix "SPC"
			      :prefix "C-SPC")
       (rune/leader-keys
	"t" '(:ignore t :which-key "toggles")
	"tt" '(counsel-load-theme :which-key "choose theme")
	"ts" '(hydra-text-scale/body :which-key "scale-text")))

     (general-define-key
      "C-M-j" 'counsel-switch-buffer)
   #+end_src
   
* Generic Completion

  #+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)	
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))
  #+end_src

  #+begin_src emacs-lisp
    (use-package all-the-icons-ivy-rich
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
       :init
       (ivy-rich-mode 1))
  #+end_src

  #+RESULTS:

  #+begin_src emacs-lisp
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
	     ("C-x b" . counsel-ibuffer)
	     ("C-x C-f" . counsel-find-file)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history)))
  #+end_src
  
  #+begin_src emacs-lisp
    (use-package which-key
      :init (which-key-mode)
      :diminish which-key-mode
      :config
      (setq which-key-idle-delay 0.3))
  #+end_src

  #+begin_src emacs-lisp
    (use-package helpful
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+end_src
  
* Org Mode
** Install and Setup Org Mode

   #+begin_src emacs-lisp
     ;; Want this to run on every file open for org mode
     (defun efs/org-mode-setup ()
       (org-indent-mode)
       (variable-pitch-mode 1)
       (auto-fill-mode 0)
       (visual-line-mode 1)
       (setq evil-auto-indent nil))

     (defun efs/org-font-setup ()
       ;; Replace list hyphen with dot
       (font-lock-add-keywords 'org-mode
			       '(("^ *\\([-]\\) "
				  (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

       ;; Set faces for heading levels
       (dolist (face '((org-level-1 . 1.2)
		       (org-level-2 . 1.1)
		       (org-level-3 . 1.05)
		       (org-level-4 . 1.0)
		       (org-level-5 . 1.1)
		       (org-level-6 . 1.1)
		       (org-level-7 . 1.1)
		       (org-level-8 . 1.1)))
	 (set-face-attribute (car face) nil :font "Cascadia Code" :weight 'semi-light :height (cdr face)))

       ;; Ensure that anything that should be fixed-pitch in Org files appears that way
       (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
       (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
       (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
       (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
       (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
       (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
       (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
       (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

     ;; Org mode that comes bundled with Emacs is usually out of date
     ;; org-plus-contrib has the latest version with all the recent community contributions
     ;; (use-package org-plus-contrib)

     (use-package org
       :hook (org-mode-hook . efs/org-mode-setup)
       :config
       (setq org-ellipsis " ▾"
	     org-hide-emphasis-markers t)
       (efs/org-font-setup))
   #+end_src

** Add Ons

   #+begin_src emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+end_src

   #+begin_src emacs-lisp
     (defun efs/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :defer t
       :hook (org-mode . efs/org-mode-visual-fill))
   #+end_src

** Org Babel
*** Configure Babel Languages

   #+begin_src emacs-lisp
     (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . t)
	 (python .t)))

     (setq org-confirm-babel-evaluate nil)
   #+end_src

   #+RESULTS:
   
*** Auto Tangle Configuration Files

   #+begin_src emacs-lisp
     ;; Automatically tangle our Emacs.org config file when we save it
     (defun efs/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
				(expand-file-name "~/Work/repos/dotfiles/emacs/dotfiles.org"))
	      ;; Dynamic scoping to the rescue
	      (let ((org-confirm-babel-evaluate nil))
		(org-babel-tangle))))

	  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
   #+end_src

   #+RESULTS:
   | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-tempo-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | efs/org-mode-visual-fill | org-bullets-mode | (lambda nil (display-line-numbers-mode 0)) |

*** Templates
   
#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
#+end_src

* Development
** Git

   #+begin_src emacs-lisp
     (use-package magit
       :commands (magit-status magit-get-current-branch))
     ; :custom
     ; (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+end_src
   
** Projectile

   #+begin_src emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config
       (projectile-mode)
       :custom
       ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/Work/repos")
	 (setq projectile-project-search-path '("~/Work/repos")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :after (counsel projectile)
       :config (counsel-projectile-mode))
   #+end_src
   
** Languages
*** Markdown

    #+begin_src emacs-lisp
      (use-package markdown-mode
	:ensure t
	:commands (markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
	       ("\\.md\\'" . markdown-mode)
	       ("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "multimarkdown"))
    #+end_src
