#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+STARTUP: overview

  I use this org mode document to manage my Emacs configuration.
  This file generates `init.el` which can be loaded by Emacs at startup.

* Package Management
** Setup package archives
    
   #+begin_src emacs-lisp
     ;; Initialize package sources
     (require 'package)

     ;; Setup package archives
     (setq package-archives
	   '(("gnu" . "https://elpa.gnu.org/packages/")
	     ("org" . "https://orgmode.org/elpa/")
	     ("melpa" . "https://melpa.org/packages/")))

     ;; Initialize package system
     (package-initialize)
     (unless package-archive-contents
       (package-refresh-contents))
   #+end_src
   
** Install use-package

   #+begin_src emacs-lisp
     ;; Install use-package if not already present
     (unless (package-installed-p 'use-package)
       (package-install 'use-package))
     (require 'use-package)

     ;; Ensure that every package is installed
     (setq use-package-always-ensure t)
     ;; Log package loading and configuration details
     (setq use-package-verbose t)
   #+end_src

** Auto-update packages

   #+begin_src emacs-lisp
     (use-package auto-package-update
       :custom
       (auto-package-update-interval 7)
       (auto-package-update-prompt-before-update t)
       (auto-package-update-hide-results t)
       :config
       (auto-package-update-maybe)
       (auto-package-update-at-time "21:00"))
   #+end_src

* StartUp Configuration
** Splash settings
   
   #+begin_src emacs-lisp
     ;; Inhibit startup message
     (setq inhibit-startup-message t)
   #+end_src

** Startup performance

   #+begin_src emacs-lisp
     ;; The default is 800 kilobytes.  Measured in bytes.
     (setq gc-cons-threshold (* 50 1000 1000))

     (defun dot/display-startup-time ()
       (message "Emacs loaded in %s with %d garbage collections."
		(format "%.2f seconds"
			(float-time
			  (time-subtract after-init-time before-init-time)))
		gcs-done))

     (add-hook 'emacs-startup-hook #'dot/display-startup-time)
   #+end_src

   #+RESULTS:
   | dot/display-startup-time |
   
** Setup env variables

   #+begin_src emacs-lisp
     ;; load env variables from shell
     (use-package exec-path-from-shell
       :config
       (when (memq window-system '(mac ns x))
       (exec-path-from-shell-initialize)))
   #+end_src

** Set custom file

   #+begin_src emacs-lisp
     ;; Use separate file for storing customization info
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file)
   #+end_src

* UI Configuration
** Minimal UI

   #+begin_src emacs-lisp
     (scroll-bar-mode -1) ; Disable visual scroll bar
     (tool-bar-mode -1)   ; Disable the tool bar
     (tooltip-mode -1)    ; Disable tooltips
     (set-fringe-mode 10) ; Give some breathing room
     (menu-bar-mode -1)   ; Disable menu bar

     ;; Setup the visible bell
     (setq visible-bell t)
   #+end_src

** Lines
*** Show line numbers
    
   #+begin_src emacs-lisp
     (global-display-line-numbers-mode t)

     ;; Disable line numbers for some modes
     (dolist (mode `(org-mode-hook
		     dired-mode-hook
		     term-mode-hook
		     vterm-mode-hook
		     shell-mode-hook
		     treemacs-mode-hook
		     eshell-mode-hook))
       (add-hook mode (lambda() (display-line-numbers-mode 0))))
   #+end_src

*** Highlight current line
    
   #+begin_src emacs-lisp
     ;; Highlight current line
     (add-hook 'prog-mode-hook 'hl-line-mode )
   #+end_src
    
** Scrolling
   
   #+begin_src emacs-lisp
     ;; Enable smooth scrolling
     (use-package smooth-scrolling
       :ensure t
       :init (smooth-scrolling-mode 1))
   #+end_src
   
** Font configuration
*** Increase line height
    
   #+begin_src emacs-lisp
     (setq-default line-spacing 0.5)
   #+end_src

*** Set font face
    
   #+begin_src emacs-lisp
     ;; Set font
     (set-face-attribute 'default nil :font "MonacoB-13" :weight 'semi-light)

     ;; Set the fixed pitch face
     (set-face-attribute 'fixed-pitch nil :font "MonacoB-13" :weight 'semi-light)

     ;; Set the variable pitch face
     (set-face-attribute 'variable-pitch nil :font "Average-18" :weight 'semi-light)
   #+end_src

*** Install icon fonts
    
   #+begin_src emacs-lisp
     ;; icon fonts to prettify doom mode line
     (use-package all-the-icons
       :init
       (when (and (not (member "all-the-icons" (font-family-list)))
		  (window-system))
	 (all-the-icons-install-fonts t)))
   #+end_src
   
** Color Theme
   
   #+begin_src emacs-lisp
     (use-package doom-themes
       :config
       ;; Global Settings
       (setq doom-themes-enable-bold t
	     doom-themes-enable-italic t)
       (load-theme 'doom-dracula t)
       ;; Corrects (and improves) org-mode's native fontification.
       (doom-themes-org-config))
   #+end_src

   #+begin_src emacs-lisp
     ;; Set fringe color to nil
     (set-face-attribute 'fringe nil :background nil)
   #+end_src
   
** Better modeline
   
   #+begin_src emacs-lisp
     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1))
   #+end_src

   #+begin_src emacs-lisp
     ;; Show column number in mode line
     (column-number-mode)
   #+end_src
      
* File Management
** Backup

   #+begin_src emacs-lisp
     ;; store backup files in the tmp dir
     (setq backup-directory-alist
	   `((".*" . ,temporary-file-directory)))
   #+end_src
   
** Auto Save

   #+begin_src emacs-lisp
     ;; store auto-save files in the tmp dir
     (setq auto-save-file-name-transforms
	   `((".*" ,temporary-file-directory t)))
   #+end_src

** Dired

   #+begin_src emacs-lisp
     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom
       (delete-by-moving-to-trash t))

     (use-package dired-single
       :after dired
       :commands (dired dired-jump))

     (use-package all-the-icons-dired
       :after dired
       :commands (dired dired-jump)
       :if (display-graphic-p)
       :hook (dired-mode . all-the-icons-dired-mode))
   #+end_src

   #+RESULTS:
   | all-the-icons-dired-mode | doom-modeline-set-project-modeline | (lambda nil (display-line-numbers-mode 0)) |
   
* Keyboard Configuration
** Esc key

   #+begin_src emacs-lisp
     ;; Make ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
   #+end_src

** Command log

   #+begin_src emacs-lisp
     ;; Log commands in a buffer
     (use-package command-log-mode
       :commands command-log-mode)
   #+end_src

** Key bindings
   
   #+begin_src emacs-lisp
     ;; Compose key sequences
     (use-package hydra
       :defer t)

     (defhydra hydra-text-scale (:timeout 4)
       "scale text"
       ("j" text-scale-increase "in")
       ("k" text-scale-decrease "out")
       ("f" nil "finished" :exit t))
   #+end_src

   #+begin_src emacs-lisp
     ;; Convenient key bindings 
     (use-package general
       :after (ivy counsel)
       :config  
       (general-create-definer rune/leader-keys
			      :keymaps '(emacs)
			      :prefix "SPC"
			      :prefix "C-SPC")
       (rune/leader-keys
	"t" '(:ignore t :which-key "toggles")
	"tt" '(counsel-load-theme :which-key "choose theme")
	"ts" '(hydra-text-scale/body :which-key "scale-text")))

     (general-define-key
      "C-M-j" 'counsel-switch-buffer)
   #+end_src
   
* Generic Completion
** Keyboard hints with which-key

  #+begin_src emacs-lisp
    (use-package which-key
      :defer 0
      :diminish which-key-mode
      :config
      (which-key-mode)
      (setq which-key-idle-delay 0.5))
  #+end_src
      
** Better completion with ivy and counsel
*** Setup ivy
    
  #+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :bind (("C-s" . swiper)
	     :map ivy-minibuffer-map
	     ("TAB" . ivy-alt-done)	
	     ("C-l" . ivy-alt-done)
	     ("C-j" . ivy-next-line)
	     ("C-k" . ivy-previous-line)
	     :map ivy-switch-buffer-map
	     ("C-k" . ivy-previous-line)
	     ("C-l" . ivy-done)
	     ("C-d" . ivy-switch-buffer-kill)
	     :map ivy-reverse-i-search-map
	     ("C-k" . ivy-previous-line)
	     ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))
  #+end_src


  #+begin_src emacs-lisp
    (use-package all-the-icons-ivy-rich
      :after ivy
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))
  #+end_src

  #+begin_src emacs-lisp
    (use-package ivy-rich
       :after (ivy all-the-icons-ivy-rich)
       :init
       (ivy-rich-mode 1))
  #+end_src

*** Setup counsel
    
  #+begin_src emacs-lisp
    (use-package counsel
      :bind (("M-x" . counsel-M-x)
	     ("C-x b" . counsel-ibuffer)
	     ("C-x C-f" . counsel-find-file)
	     :map minibuffer-local-map
	     ("C-r" . 'counsel-minibuffer-history))
      :config
      (counsel-mode 1))
  #+end_src

*** Better sorting with prescient
    
  #+begin_src emacs-lisp
    (use-package ivy-prescient
      :after counsel
      :custom
      (ivy-prescient-enable-filtering nil)
      :config
      (prescient-persist-mode 1)
      (ivy-prescient-mode 1))
  #+end_src

** Better help with helpful

  #+begin_src emacs-lisp
    (use-package helpful
      :commands (helpful-callable helpful-variable helpful-command helpful-key)
      :custom
      (counsel-describe-function-function #'helpful-callable)
      (counsel-describe-variable-function #'helpful-variable)
      :bind
      ([remap describe-function] . counsel-describe-function)
      ([remap describe-command] . helpful-command)
      ([remap describe-variable] . counsel-describe-variable)
      ([remap describe-key] . helpful-key))
  #+end_src
  
* Org Mode
** Setup org-mode
   
   + =org-mode= bundled with Emacs is usually outdated
   + Install the latest version of `org-mode` from org package [[https://orgmode.org/elpa.html][archive]].

   #+begin_src emacs-lisp
     ;; Want this to run on every file open for org mode
     (defun efs/org-mode-setup ()
       (org-indent-mode)
       (variable-pitch-mode 1)
       (auto-fill-mode 0)
       (visual-line-mode 1)
       (setq evil-auto-indent nil))

     (defun efs/org-font-setup ()
       ;; Replace list hyphen with dot
       (font-lock-add-keywords 'org-mode
			       '(("^ *\\([-]\\) "
				  (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

       ;; Set faces for heading levels
       (dolist (face '((org-level-1 . 1.2)
		       (org-level-2 . 1.1)
		       (org-level-3 . 1.05)
		       (org-level-4 . 1.0)
		       (org-level-5 . 1.1)
		       (org-level-6 . 1.1)
		       (org-level-7 . 1.1)
		       (org-level-8 . 1.1)))
	 (set-face-attribute (car face) nil :font "Average-18" :weight 'normal))

       ;; Ensure that anything that should be fixed-pitch in Org files appears that way
       (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
       (set-face-attribute 'org-table nil    :inherit 'fixed-pitch)
       (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
       (set-face-attribute 'org-code nil     :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
       (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
       (set-face-attribute 'org-checkbox nil  :inherit 'fixed-pitch)
       (set-face-attribute 'line-number nil :inherit 'fixed-pitch)
       (set-face-attribute 'line-number-current-line nil :inherit 'fixed-pitch))

     ;; Org mode that comes bundled with Emacs is usually out of date
     ;; org-plus-contrib has the latest version with all the recent community contributions
     ;; (use-package org-plus-contrib)

     (use-package org
       :commands (org-capture org-agenda)
       :hook (org-mode-hook . efs/org-mode-setup)
       :config
       (setq org-ellipsis " ▾"
	     org-hide-emphasis-markers t)
       (efs/org-font-setup))
   #+end_src

** Add Ons
*** Nice heading bullets
    
   #+begin_src emacs-lisp
     (use-package org-bullets
       :hook (org-mode . org-bullets-mode)
       :custom
       (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
   #+end_src

*** Center org buffers
    
   #+begin_src emacs-lisp
     (defun efs/org-mode-visual-fill ()
       (setq visual-fill-column-width 100
	     visual-fill-column-center-text t)
       (visual-fill-column-mode 1))

     (use-package visual-fill-column
       :defer t
       :hook (org-mode . efs/org-mode-visual-fill))
   #+end_src

** Org Babel
*** Configure Babel Languages

   #+begin_src emacs-lisp
     (with-eval-after-load 'org
       (org-babel-do-load-languages
	   'org-babel-load-languages
	   '((emacs-lisp . t)
	   (python . t)))

       (push '("conf-unix" . conf-unix) org-src-lang-modes))
   #+end_src

   #+RESULTS:
   : ((conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql))
   
*** Templates
   
#+begin_src emacs-lisp
  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))
#+end_src

*** Auto Tangle Configuration Files

   #+begin_src emacs-lisp
     ;; Automatically tangle our Emacs.org config file when we save it
     (defun efs/org-babel-tangle-config ()
       (when (string-equal (buffer-file-name)
				(expand-file-name "~/Work/repos/dotfiles/emacs/dotfiles.org"))
	      ;; Dynamic scoping to the rescue
	      (let ((org-confirm-babel-evaluate nil))
		(org-babel-tangle))))

     (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
   #+end_src

   #+RESULTS:
   | (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-tempo-setup | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | efs/org-mode-visual-fill | org-bullets-mode | (lambda nil (display-line-numbers-mode 0)) |

* Development
** Git
   
   #+begin_src emacs-lisp
     (use-package magit
       :commands (magit-status magit-get-current-branch))
   #+end_src
   
** Projectile

   #+begin_src emacs-lisp
     (use-package projectile
       :diminish projectile-mode
       :config
       (projectile-mode)
       :custom
       ((projectile-completion-system 'ivy))
       :bind-keymap
       ("C-c p" . projectile-command-map)
       :init
       (when (file-directory-p "~/Work/repos")
	 (setq projectile-project-search-path '("~/Work/repos")))
       (setq projectile-switch-project-action #'projectile-dired))

     (use-package counsel-projectile
       :after projectile
       :config (counsel-projectile-mode))
   #+end_src

** Commenting

   #+begin_src emacs-lisp
     (use-package evil-nerd-commenter
       :bind ("M-/" . evilnc-comment-or-uncomment-lines))
   #+end_src

   #+RESULTS:
   : evilnc-comment-or-uncomment-lines

** Rainbow delimiters

   #+begin_src emacs-lisp
     ;; Highlight delimiters like parentheses
     (use-package rainbow-delimiters
       :hook (prog-mode . rainbow-delimiters-mode))
   #+end_src
   
** Sytnax Completion

   #+begin_src emacs-lisp
     (use-package company
       :bind (:map company-active-map
	      ("<tab>" . company-complete-selection))
	     (:map lsp-mode-map
	      ("<tab>" . company-indent-or-complete-common))
       :custom
       (company-minimum-prefix-length 1)
       (company-idle-delay 0.0))

     (use-package company-box
       :hook (company-mode . company-box-mode))
   #+end_src

   #+RESULTS:
   | company-box-mode | company-mode-set-explicitly |

** Syntax Checking

   #+begin_src emacs-lisp
     (use-package flycheck
       :ensure t
       :init (global-flycheck-mode))
   #+end_src

   #+RESULTS:
   
** Language Server

   https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
   
   #+begin_src emacs-lisp
     (use-package lsp-mode
       :commands (lsp lsp-deferred)
       :init
       (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
       :custom
       (lsp-completion-provider :company-capf)
       (lsp-enable-which-key-integration t)
       (lsp-headerline-breadcrumb-enable nil))
   #+end_src

   #+RESULTS:
   : t

   #+begin_src emacs-lisp
     (use-package lsp-ui
       :hook (lsp-mode . lsp-ui-mode)
       :custom
       (lsp-ui-doc-enable nil)
       (lsp-ui-doc-position 'bottom)
       (lsp-ui-doc-show-with-cursor nil))
   #+end_src

   #+RESULTS:
   | lsp-ui-mode | company-mode |

   #+begin_src emacs-lisp
     (use-package lsp-treemacs
       :after lsp)
   #+end_src

   #+RESULTS:

   #+begin_src emacs-lisp
     (use-package lsp-ivy
       :after lsp)
   #+end_src

   #+RESULTS:
   
** Languages
*** Markdown

    #+begin_src emacs-lisp
      (use-package markdown-mode
	:ensure t
	:commands (markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
	       ("\\.md\\'" . markdown-mode)
	       ("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "multimarkdown"))
    #+end_src

*** TypeScript

    #+begin_src emacs-lisp
      (use-package typescript-mode
	:mode "\\.ts\\'"
	:hook (typescript-mode . lsp-deferred)
	:config
	(setq typescript-indent-level 2))
    #+end_src

    #+RESULTS:
    : ((\.ts\' . typescript-mode) (\.markdown\' . markdown-mode) (\.md\' . markdown-mode) (README\.md\' . gfm-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (/git-rebase-todo\' . git-rebase-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.ad[abs]\' . ada-mode) (\.ad[bs]\.dg\' . ada-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-bsdmake-mode) (\.make\' . makefile-bsdmake-mode) (GNUmakefile\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-bsdmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))
    
*** Go

    #+begin_src emacs-lisp
      (use-package go-mode
	:mode "\\.go\\'"
	:hook (go-mode . lsp-deferred))

      ;; Set up before-save hooks to format buffer and add/delete imports.
      ;; Make sure you don't have other gofmt/goimports hooks enabled.
      (defun lsp-go-install-save-hooks ()
	(add-hook 'before-save-hook #'lsp-format-buffer t t)
	(add-hook 'before-save-hook #'lsp-organize-imports t t))

      (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

      (with-eval-after-load 'lsp
	  (lsp-register-custom-settings
	   '(("gopls.completeUnimported" t t)
	     ("gopls.staticcheck" t t))))
    #+end_src

    #+RESULTS:

*** Python

    https://emacs-lsp.github.io/lsp-mode/page/lsp-pyls/
    
    #+begin_src shell
      pip3 install 'python-language-server[all]'
      pip3 install gnureadline
    #+end_src

    #+begin_src emacs-lisp
      (use-package python-mode
	:ensure t
	:hook (python-mode . lsp-deferred)
	:custom
	;; NOTE: Set these if Python 3 is called "python3" on your system!
	(python-shell-interpreter "python3"))
    #+end_src

    #+RESULTS:
    | lsp-deferred | #[0 \211\207 [py--imenu-create-index-function imenu-create-index-function] 2] | doom-modeline-env-setup-python |

    #+begin_src shell
      pip3 install pytest
    #+end_src

    #+begin_src emacs-lisp
      (use-package pyvenv
	:config
	(pyvenv-mode 1))
    #+end_src

    #+RESULTS:
    : t

* Terminals
** term-mode

   #+begin_src emacs-lisp
     (use-package term
       :commands term
       :config
       (setq explicit-shell-file-name "zsh") ;; Change this to bash, etc
       ;;(setq explicit-zsh-args '())         ;; Use 'explicit-<shell>-args for shell-specific args

       ;; Match the default Bash shell prompt.  Update this if you have a custom prompt
       (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))
   #+end_src

   #+RESULTS:
   : t

*** Better colors

    #+begin_src emacs-lisp
      (use-package eterm-256color
	:hook (term-mode . eterm-256color-mode))
    #+end_src

    #+RESULTS:
    | eterm-256color-mode | (lambda nil (display-line-numbers-mode 0)) |
   
** vterm

   #+begin_src emacs-lisp
     (use-package vterm
       :commands vterm
       :config
       (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
       (setq vterm-shell "zsh")                         ;; Set this to customize the shell to launch
       (setq vterm-max-scrollback 10000))
   #+end_src

   #+RESULTS:
         
