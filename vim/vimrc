" Specify a directory for plugins
call plug#begin('~/.vim/plugged')

"-----------------------------------------------------------
" Plugins
"-----------------------------------------------------------
Plug 'mhinz/vim-startify'					" fancy start screen
Plug 'dracula/vim', { 'as': 'dracula' }				" dracula color scheme
Plug 'bling/vim-airline'					" lightweight status bar
Plug 'jiangmiao/auto-pairs'					" brackets, parens, quotes in pair.
Plug 'bronson/vim-trailing-whitespace'				" highlight unwanted whitespace
Plug 'preservim/nerdtree'					" file system explorer
Plug 'airblade/vim-gitgutter'					" show git diff
Plug 'plasticboy/vim-markdown'					" markdown vim mode
Plug 'lifepillar/pgsql.vim'                     		" postgres vim mode
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }	" aynchronous auto complete
Plug 'AndrewRadev/splitjoin.vim'				" single-line <=> multi-line statments
Plug 'SirVer/ultisnips'						" ultimate snippets
Plug 'ctrlpvim/ctrlp.vim'					" fuzzy search
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }		" go development env
Plug 'dense-analysis/ale'					" check syntax and lint
Plug 'ryanoasis/vim-devicons'					" file type icons for nerdtree
" Initialize plugin system
call plug#end()

"-----------------------------------------------------------
" Key Mappings
"-----------------------------------------------------------
" set leader shortcut to a comma ','. By default it's the backslash
let mapleader = ","

" Jump to next error with Ctrl-n and previous error with Ctrl-m. Close the
" quickfix window with <leader>a
map <C-n> :cnext<CR>
map <C-m> :cprevious<CR>
nnoremap <leader>a :cclose<CR>

"-----------------------------------------------------------
" General Settings
"
" https://github.com/fatih/vim-go-tutorial/blob/master/vimrc
"-----------------------------------------------------------
set nocompatible                " enables vim specific features
filetype off                    " reset filetype detection first ...
filetype plugin indent on       " ... and enable filetype detection
syntax enable			" enable syntax highlighting
set ttyfast                     " indicate fast terminal conn for faster redraw
set mouse=a			" enable mouse
"set ttymouse=xterm2            " indicate terminal type for mouse codes
"set ttyscroll=3                " speedup scrolling
set laststatus=2                " show status line always
set encoding=utf-8              " set default encoding to UTF-8
set autoread                    " automatically read changed files
set autoindent                  " enabile Autoindent
set smartindent                 " enable smart indentation
set backspace=indent,eol,start  " makes backspace key more powerful.
set incsearch                   " shows the match while typing
set hlsearch                    " highlight found searches
set noerrorbells                " no beeps!
set novisualbell                " no bells!
set number                      " show line numbers
set cursorline 			" highlight current line
set showcmd                     " show me what I'm typing
set noswapfile                  " don't use swapfile
set nobackup                    " don't create annoying backup files
set splitright                  " vertical windows should be split to right
set splitbelow                  " horizontal windows should split to bottom
set autoread                    " reload file if the file changes on the disk
set autowrite                   " automatically save before :next, :make etc. Or when switching buffers
set autowriteall                " write on :quit
set hidden                      " buffer should still exist if window is closed
set fileformats=unix,mac        " prefer Unix, OSX over Windows fileformats
set noshowmatch                 " do not show matching brackets by flickering
set noshowmode                  " we show the mode with airline or lightline
set ignorecase                  " search case insensitive...
set smartcase                   " ... but not it begins with upper case
set completeopt=menu,menuone    " show popup menu, even if there is one entry
set pumheight=10                " completion window max size
set nocursorcolumn              " do not highlight column (speeds up highlighting)
"set nocursorline                " do not highlight cursor (speeds up highlighting)
set title                       " let vim set the terminal title
set lazyredraw                  " wait to redraw
set autochdir

" Having longer updatetime (default is 4000 ms = 4s) leads to noticeable
" delays and poor user experience
set updatetime=300

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved
set signcolumn=yes

" Enable to copy to clipboard for operations like yank, delete, change and put
" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
if has('unnamedplus')
  set clipboard^=unnamed
  set clipboard^=unnamedplus
endif

"-----------------------------------------------------------
" Color Scheme
"-----------------------------------------------------------
let g:dracula_italic = 0
set t_Co=256
colorscheme dracula

"-----------------------------------------------------------
" Plugin: bling/vim-airline
"-----------------------------------------------------------
" Show status bar by default.
set laststatus=2

" Enable top tabline.
let g:airline#extensions#tabline#enabled = 1

" Disable showing tabs in the tabline. This will ensure that the buffers are
" what is shown in the tabline at all times.
let g:airline#extensions#tabline#show_tabs = 0

" Enable powerline fonts.
let g:airline_powerline_fonts = 1

" Explicitly define some symbols that did not work well for me in Linux.
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

let g:airline_symbols.branch = '⎇'
let g:airline_symbols.maxlinenr = ' L'

"-----------------------------------------------------------
" Plugin: preservim/nerdtree
"-----------------------------------------------------------
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

"----------------------------------------------
" Plugin: airblade/vim-gitgutter
"----------------------------------------------
let g:gitgutter_max_signs = -1 " remove the limit for showing signs

"----------------------------------------------
" Plugin: Shougo/deoplete.nvim
"----------------------------------------------
let g:deoplete#enable_at_startup = 1
call deoplete#custom#option('omni_patterns', { 'go': '[^. *\t]\.\w*' })

"-----------------------------------------------------------
" Plugin: dense-analysis/ale
"
" https://github.com/dense-analysis/ale
" https://github.com/dense-analysis/ale/issues/44
"-----------------------------------------------------------
let g:ale_sign_error = ''
let g:ale_sign_warning = ''
highlight ALEErrorSign ctermbg=NONE ctermfg=red
highlight ALEWarningSign ctermbg=NONE ctermfg=yellow

" keep the sign gutter open
let g:ale_sign_column_always = 1
" set this. Airline will handle the rest.
let g:airline#extensions#ale#enabled = 1

"-----------------------------------------------------------
" Language: gitcommit
"-----------------------------------------------------------
au FileType gitcommit setlocal spell
au FileType gitcommit setlocal textwidth=72
au FileType gitcommit set colorcolumn=50,72
au FileType gitcommit set expandtab
au FileType gitcommit set shiftwidth=2
au FileType gitcommit set softtabstop=2
au FileType gitcommit set tabstop=2
autocmd FileType gitcommit setlocal spell

"----------------------------------------------
" Language: Markdown
"----------------------------------------------
au FileType markdown set expandtab
au FileType markdown set shiftwidth=4
au FileType markdown set softtabstop=4
au FileType markdown set tabstop=4
autocmd BufRead,BufNewFile *.md setlocal spell

"----------------------------------------------
" Language: SQL
"----------------------------------------------
au FileType sql set expandtab
au FileType sql set shiftwidth=2
au FileType sql set softtabstop=2
au FileType sql set tabstop=2

"----------------------------------------------
" Language: YAML
"----------------------------------------------
au FileType yaml set expandtab
au FileType yaml set shiftwidth=2
au FileType yaml set softtabstop=2
au FileType yaml set tabstop=2

"----------------------------------------------
" Language: Go
"
" https://github.com/fatih/vim-go/wiki/Tutorial
"----------------------------------------------
au FileType go set expandtab
au FileType go set shiftwidth=4
au FileType go set softtabstop=4
au FileType go set tabstop=4

" run :GoBuild or :GoTestCompile based on the go file
function! s:build_go_files()
  let l:file = expand('%')
  if l:file =~# '^\f\+_test\.go$'
    call go#test#Test(0, 1)
  elseif l:file =~# '^\f\+\.go$'
    call go#cmd#Build(0)
  endif
endfunction

autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>
autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
autocmd FileType go nmap <leader>b  <Plug>(go-build)
autocmd FileType go nmap <leader>r  <Plug>(go-run)
autocmd FileType go nmap <Leader>i <Plug>(go-info)
autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')

" use goimports intead of gofmt
let g:go_fmt_command = "goimports"
" use camelcase for json tags
let g:go_addtags_transform = "camelcase"

" syntax highlighting
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_build_constraints = 1

" static code analysis
let g:go_metalinter_autosave = 1
let g:go_metalinter_autosave_enabled = ['vet', 'golint', 'errcheck']
let g:go_metalinter_deadline = "5s"

" use quickfix for all lists
let g:go_list_type = "quickfix"

" show functions and types in fuzzy search
let g:go_decls_includes = "func,type"

" show info in status line
let g:go_auto_type_info = 1
